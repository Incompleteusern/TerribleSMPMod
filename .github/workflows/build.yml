# Automatically build the project and run any configured tests for every push
# and submitted pull request. This can help catch issues that only occur on
# certain platforms or Java versions, and provides a first line of defence
# against bad commits.

name: build
on: [pull_request, push]

jobs:
  build:
    strategy:
      matrix:
        java: [17]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1
        
      - name: Setup JDK ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
          cache: gradle
          
      - name: Make Gradle Wrapper Executable
        run: chmod +x ./gradlew
        
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: buildDependents

      - name: Get SHA
        run: echo "SHA=`echo ${GITHUB_SHA}`" >> $GITHUB_ENV

      - name: Get Version
        run: echo "MOD_VERSION=`grep 'mod_version' ./gradle.properties | awk -F ' = ' '{print $2}'`" >> $GITHUB_ENV

      - name: capture build artifacts
        uses: actions/upload-artifact@v3
        with:
          path: |
            **/build/libs/*-${{ env.MOD_VERSION }}.jar
          if-no-files-found: error
        
      - name: Create release
        id: release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "latest"
          draft: true
          body: "SHA of [${{ env.SHA }}] and version [${{ env.MOD_VERSION }}]"
          prerelease: true

      - name: Upload files to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.changelog.outputs.tag }}
          draft: true
          prerelease: true
          files: |
            **/build/libs/*-${{ env.MOD_VERSION }}.jar



